{"ast":null,"code":"import { inputs } from '../config';\n\nconst selectNums = state => {\n  return inputs.reduce((res, i) => {\n    const name = \"num\".concat(i);\n    res[name] = state.nums[name];\n    return res;\n  }, {});\n};\n\nconst selectErrors = state => {\n  return inputs.reduce((res, i) => {\n    const name = \"num\".concat(i);\n    res[name] = state.errors[name];\n    return res;\n  }, {});\n};\n\nconst selectIsAllFilled = state => {\n  const nums = selectNums(state);\n  return Object.values(nums).every(num => Boolean(num));\n};\n\nconst selectResult = state => {\n  return state.result;\n};\n\nexport { selectNums, selectErrors, selectIsAllFilled, selectResult };","map":{"version":3,"sources":["/Users/omer/Downloads/check-digit/src/redux/selectors.js"],"names":["inputs","selectNums","state","reduce","res","i","name","nums","selectErrors","errors","selectIsAllFilled","Object","values","every","num","Boolean","selectResult","result"],"mappings":"AAAA,SAASA,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC7B,SAAOF,MAAM,CAACG,MAAP,CAAc,CAACC,GAAD,EAAMC,CAAN,KAAY;AAChC,UAAMC,IAAI,gBAASD,CAAT,CAAV;AACAD,IAAAA,GAAG,CAACE,IAAD,CAAH,GAAYJ,KAAK,CAACK,IAAN,CAAWD,IAAX,CAAZ;AACA,WAAOF,GAAP;AACA,GAJM,EAIJ,EAJI,CAAP;AAKA,CAND;;AAQA,MAAMI,YAAY,GAAIN,KAAD,IAAW;AAC/B,SAAOF,MAAM,CAACG,MAAP,CAAc,CAACC,GAAD,EAAMC,CAAN,KAAY;AAChC,UAAMC,IAAI,gBAASD,CAAT,CAAV;AACAD,IAAAA,GAAG,CAACE,IAAD,CAAH,GAAYJ,KAAK,CAACO,MAAN,CAAaH,IAAb,CAAZ;AACA,WAAOF,GAAP;AACA,GAJM,EAIJ,EAJI,CAAP;AAKA,CAND;;AAQA,MAAMM,iBAAiB,GAAIR,KAAD,IAAW;AACpC,QAAMK,IAAI,GAAGN,UAAU,CAACC,KAAD,CAAvB;AACA,SAAOS,MAAM,CAACC,MAAP,CAAcL,IAAd,EAAoBM,KAApB,CAA0BC,GAAG,IAAIC,OAAO,CAACD,GAAD,CAAxC,CAAP;AACA,CAHD;;AAKA,MAAME,YAAY,GAAId,KAAD,IAAW;AAC/B,SAAOA,KAAK,CAACe,MAAb;AACA,CAFD;;AAIA,SACChB,UADD,EAECO,YAFD,EAGCE,iBAHD,EAICM,YAJD","sourcesContent":["import { inputs } from '../config';\n\nconst selectNums = (state) => {\n\treturn inputs.reduce((res, i) => {\n\t\tconst name = `num${i}`;\n\t\tres[name] = state.nums[name];\n\t\treturn res;\n\t}, {});\n};\n\nconst selectErrors = (state) => {\n\treturn inputs.reduce((res, i) => {\n\t\tconst name = `num${i}`;\n\t\tres[name] = state.errors[name];\n\t\treturn res;\n\t}, {});\n};\n\nconst selectIsAllFilled = (state) => {\n\tconst nums = selectNums(state);\n\treturn Object.values(nums).every(num => Boolean(num));\n};\n\nconst selectResult = (state) => {\n\treturn state.result;\n}\n\nexport {\n\tselectNums,\n\tselectErrors,\n\tselectIsAllFilled,\n\tselectResult,\n};\n"]},"metadata":{},"sourceType":"module"}